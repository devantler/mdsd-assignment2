/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.IScope
import dk.sdu.mmmi.mdsd.math.MathPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.math.Model
import dk.sdu.mmmi.mdsd.math.VariableReference
import dk.sdu.mmmi.mdsd.math.Variable
import dk.sdu.mmmi.mdsd.math.LocalVariable

class MathScopeProvider extends AbstractMathScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		return getGlobalVariableScope(context);
	}
	
	def getGlobalVariableScope(EObject context){
		val model = EcoreUtil2.getRootContainer(context) as Model;
		val globalVariables = model.variables;
		val declaredVariable = EcoreUtil2.getContainerOfType(context, Variable)
    	val otherVariables = globalVariables.filter[it.name !== declaredVariable.name].toList
		if(declaredVariable instanceof LocalVariable){
				otherVariables.add(declaredVariable)		
		}
    	return Scopes.scopeFor(otherVariables);
	}
}
