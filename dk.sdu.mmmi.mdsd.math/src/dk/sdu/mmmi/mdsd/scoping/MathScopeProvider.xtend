/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.math.Model
import dk.sdu.mmmi.mdsd.math.GlobalVariable
import dk.sdu.mmmi.mdsd.math.LocalVariable
import dk.sdu.mmmi.mdsd.math.MathPackage.Literals
import dk.sdu.mmmi.mdsd.math.Variable

class MathScopeProvider extends AbstractMathScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		switch (reference) {
			case Literals.VARIABLE_REFERENCE__VARIABLE: {
				val variable = EcoreUtil2.getContainerOfType(context, Variable);
				if (variable instanceof LocalVariable) {
					return Scopes.scopeFor(#[variable.assignment], getVariableScope(variable));
				} else {
					return getGlobalVariableScope(variable as GlobalVariable);
				}
			}
		}
		return super.getScope(context, reference);
	}

	def IScope getVariableScope(Variable variable) {
		val nextVariable = EcoreUtil2.getContainerOfType(variable.eContainer, Variable);
		if (nextVariable instanceof LocalVariable) {
			return Scopes.scopeFor(#[nextVariable.assignment], getVariableScope(nextVariable));
		} else {
			return getGlobalVariableScope(nextVariable as GlobalVariable);
		}
	}

	def IScope getGlobalVariableScope(GlobalVariable globalVariable) {
		val model = EcoreUtil2.getRootContainer(globalVariable) as Model;
		val globalVariables = model.variables.filter [
			it instanceof LocalVariable ? (it as LocalVariable).assignment.name !== globalVariable.name : (it as GlobalVariable).name !== globalVariable.name
		].toList;
		return Scopes.scopeFor(globalVariables)
	}
}
