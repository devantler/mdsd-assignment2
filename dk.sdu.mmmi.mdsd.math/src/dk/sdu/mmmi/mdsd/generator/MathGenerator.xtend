/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Model
import dk.sdu.mmmi.mdsd.math.Number
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.DivisionExpression
import dk.sdu.mmmi.mdsd.math.MultiplicationExpression
import dk.sdu.mmmi.mdsd.math.AdditionExpression
import dk.sdu.mmmi.mdsd.math.SubtractionExpression
import dk.sdu.mmmi.mdsd.math.VariableReference
import dk.sdu.mmmi.mdsd.math.LocalVariable
import dk.sdu.mmmi.mdsd.math.Variable
import dk.sdu.mmmi.mdsd.math.GlobalVariable

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static Map<String, Integer> variables = new HashMap();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.filter(Model).next
		val result = model.compute

		// You can replace with hovering, see Bettini Chapter 8
		result.displayPanel
	}

	def static compute(Model model) {
		for (variable : model.variables) {
			variables.put(variable.name, variable.expression.computeExp)
		}
		return variables
	}

	def dispatch static int computeExp(AdditionExpression expression) {
		expression.left.computeExp + expression.right.computeExp
	}

	def dispatch static int computeExp(SubtractionExpression expression) {
		expression.left.computeExp - expression.right.computeExp
	}

	def dispatch static int computeExp(MultiplicationExpression expression) {
		expression.left.computeExp * expression.right.computeExp
	}

	def dispatch static int computeExp(DivisionExpression expression) {
		expression.left.computeExp / expression.right.computeExp
	}

	def dispatch static int computeExp(Number number) {
		number.value
	}

	def dispatch static int computeExp(LocalVariable localVariable) {
		variables.put(localVariable.name, localVariable.binding.computeExp)
		localVariable.expression.computeExp
	}

	def dispatch static int computeExp(VariableReference reference) {
		variables.get(reference.variable.name)
	}

	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
			resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
		}

		JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE)
	}

}
